Python Preparation
 Interpreter in Python
Python is primarily an interpreted language, which means:
•	The Python interpreter reads your code line by line, translates it into machine code, and executes it immediately.
1.	You write Python code
Print (“hello world”)
2.Lexical Analysis (Tokenization)
•	Python breaks the code into tokens (smallest units like keywords, identifiers, symbols).
•	For example, print("Hello, world!") becomes:
•	print → function name
•	( → opening parenthesis
•	"Hello, world!" → string literal
•	) → closing parenthesis
3. Parsing
•	The interpreter checks if the syntax is correct.
•	It builds a parse tree (a structure that represents the grammatical structure of the code).
4. Bytecode Compilation
•	Python compiles the parsed code into bytecode (a low-level, platform-independent representation).
•	This bytecode is stored in .pyc files (in the __pycache__ folder).
•	Example bytecode: LOAD_NAME, CALL_FUNCTION, etc.
5. Execution by Python Virtual Machine (PVM)
•	The Python Virtual Machine (PVM) reads the bytecode line by line and executes it.
•	It translates bytecode into machine-level instructions that your computer can run.
6. Output
•	The result is shown immediately (e.g., Hello, world! is printed on the screen).
Summary Flow
Your Code (.py)
   ↓
Lexical Analysis → Parsing
   ↓
Bytecode Compilation (.pyc)
   ↓
Python Virtual Machine (PVM)
   ↓
Execution (Output)
•	This allows for interactive programming (like using the Python shell or Jupyter notebooks).
•	Errors are caught at runtime, which can make debugging easier but also means some errors only show up when that part of the code runs.
Examples of Python interpreters:
•	CPython (the default and most widely used)
•	PyPy (uses Just-In-Time compilation for faster execution)
•	Jython (Python running on the Java platform)
•	IronPython (Python for .NET)
Compiler in Python
While Python is interpreted, it also uses compilation in a limited way:
•	Python source code (.py files) is compiled into bytecode (.pyc files), which is a lower-level, platform-independent representation.
•	This bytecode is then executed by the Python Virtual Machine (PVM).
•	This compilation step is automatic and helps improve performance slightly
What is the Python Virtual Machine (PVM)?
The PVM is the runtime engine of Python. It’s a part of the Python interpreter that takes the compiled bytecode and executes it.
Think of it like a translator that reads Python’s intermediate language (bytecode) and tells your computer what to do, step by step.
How the PVM Executes Bytecode
Here’s a simplified breakdown:
1. Bytecode is Loaded
•	When you run a Python script, Python first compiles it into bytecode (e.g., print("Hello") becomes a series of bytecode instructions).
•	This bytecode is stored in memory or in .pyc files.
2. PVM Reads Bytecode Instructions
•	The PVM reads each bytecode instruction one at a time.
•	Each instruction is like a command: e.g., LOAD_NAME, CALL_FUNCTION, RETURN_VALUE.
3. Execution Stack
•	The PVM uses a stack-based architecture.
•	It pushes and pops data (like variables, function calls, results) onto a stack to keep track of what’s happening.
4. Performs Operations
•	For each bytecode instruction, the PVM performs the corresponding low-level operation:
•	Fetch a value
•	Call a function
•	Perform a calculation
•	Print output
•	Handle exceptions
5. Manages Memory
•	The PVM also handles memory management, including:
•	Creating and destroying objects
•	Reference counting
•	Garbage collection
6. Produces Output
•	As the instructions are executed, the PVM produces the final result (e.g., prints to the screen, returns a value, etc.).
Example
For this code:
The bytecode might look like:
LOAD_CONST 2
LOAD_CONST 3
BINARY_ADD
STORE_NAME x
LOAD_NAME print
LOAD_NAME x
CALL_FUNCTION 1
The PVM executes each of these instructions in order, using a stack to manage values and operations.
Summary
Component	Role in Execution
Bytecode	Intermediate code generated by Python
PVM	Executes bytecode instructions
Stack	Temporary storage for operations
Memory Manager	Handles object creation and cleanup


